/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef entry_thrift_TYPES_H
#define entry_thrift_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace entry {

class ThriftPkg;

typedef struct _ThriftPkg__isset {
  _ThriftPkg__isset() : ret(false), main_cmd(false), sub_cmd(false), buf_data(false), str_data(false) {}
  bool ret :1;
  bool main_cmd :1;
  bool sub_cmd :1;
  bool buf_data :1;
  bool str_data :1;
} _ThriftPkg__isset;

class ThriftPkg {
 public:

  static const char* ascii_fingerprint; // = "DC4A7944CA87068C3A6D1BCBB8633569";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x4A,0x79,0x44,0xCA,0x87,0x06,0x8C,0x3A,0x6D,0x1B,0xCB,0xB8,0x63,0x35,0x69};

  ThriftPkg(const ThriftPkg&);
  ThriftPkg& operator=(const ThriftPkg&);
  ThriftPkg() : ret(0), main_cmd(0), sub_cmd(0), buf_data(), str_data() {
  }

  virtual ~ThriftPkg() throw();
  int32_t ret;
  int32_t main_cmd;
  int32_t sub_cmd;
  std::string buf_data;
  std::string str_data;

  _ThriftPkg__isset __isset;

  void __set_ret(const int32_t val);

  void __set_main_cmd(const int32_t val);

  void __set_sub_cmd(const int32_t val);

  void __set_buf_data(const std::string& val);

  void __set_str_data(const std::string& val);

  bool operator == (const ThriftPkg & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(main_cmd == rhs.main_cmd))
      return false;
    if (!(sub_cmd == rhs.sub_cmd))
      return false;
    if (!(buf_data == rhs.buf_data))
      return false;
    if (!(str_data == rhs.str_data))
      return false;
    return true;
  }
  bool operator != (const ThriftPkg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftPkg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftPkg& obj);
};

void swap(ThriftPkg &a, ThriftPkg &b);

} // namespace

#endif

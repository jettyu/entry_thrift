/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "entry_thrift_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace entry {


ThriftPkg::~ThriftPkg() throw() {
}


void ThriftPkg::__set_ret(const int32_t val) {
  this->ret = val;
__isset.ret = true;
}

void ThriftPkg::__set_main_cmd(const int32_t val) {
  this->main_cmd = val;
}

void ThriftPkg::__set_sub_cmd(const int32_t val) {
  this->sub_cmd = val;
}

void ThriftPkg::__set_data(const std::string& val) {
  this->data = val;
__isset.data = true;
}

const char* ThriftPkg::ascii_fingerprint = "71DA0ECCE646530E6545B34A6E55E5F9";
const uint8_t ThriftPkg::binary_fingerprint[16] = {0x71,0xDA,0x0E,0xCC,0xE6,0x46,0x53,0x0E,0x65,0x45,0xB3,0x4A,0x6E,0x55,0xE5,0xF9};

uint32_t ThriftPkg::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_main_cmd = false;
  bool isset_sub_cmd = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->main_cmd);
          isset_main_cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_cmd);
          isset_sub_cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_main_cmd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sub_cmd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ThriftPkg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ThriftPkg");

  if (this->__isset.ret) {
    xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->ret);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("main_cmd", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->main_cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_cmd", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sub_cmd);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->data);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ThriftPkg &a, ThriftPkg &b) {
  using ::std::swap;
  swap(a.ret, b.ret);
  swap(a.main_cmd, b.main_cmd);
  swap(a.sub_cmd, b.sub_cmd);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

ThriftPkg::ThriftPkg(const ThriftPkg& other0) {
  ret = other0.ret;
  main_cmd = other0.main_cmd;
  sub_cmd = other0.sub_cmd;
  data = other0.data;
  __isset = other0.__isset;
}
ThriftPkg& ThriftPkg::operator=(const ThriftPkg& other1) {
  ret = other1.ret;
  main_cmd = other1.main_cmd;
  sub_cmd = other1.sub_cmd;
  data = other1.data;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ThriftPkg& obj) {
  using apache::thrift::to_string;
  out << "ThriftPkg(";
  out << "ret="; (obj.__isset.ret ? (out << to_string(obj.ret)) : (out << "<null>"));
  out << ", " << "main_cmd=" << to_string(obj.main_cmd);
  out << ", " << "sub_cmd=" << to_string(obj.sub_cmd);
  out << ", " << "data="; (obj.__isset.data ? (out << to_string(obj.data)) : (out << "<null>"));
  out << ")";
  return out;
}

} // namespace
